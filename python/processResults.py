"""
:file: processResults.py

Processes the reports generated by the Mosquito model.

:author: clayton pruitt
:date: 12/2/2019
"""

import csv
import matplotlib.pyplot as plt
import numpy as np
import os

# used to determine output file path in plotAndOutput()
file_path = os.path.dirname(__file__)

# format used for plots
fmt = 'ro'
# current plot index
pi = 0

def plotAndOutput(title, data, labels):
    """
    Creates and outputs a standardized plot to the '/reports' directory.
    [NOTE] The x-axis data will always be a point in Time in HH:MM format (i.e. a string)!

    :param title: the title of the plot
    :param data: tuple where data[0] is the x data and data[1] is the y data
    :param labels: tuple where labels[0] is the label for the x-axis and labels[1] is the label for the y-axis
    :return: outputs a .png to '/reports/ directory
    """

    global pi

    # assign data
    x = range(len(data[0]))
    y = data[1]

    # create the plot
    plt.figure(pi)
    fig, ax = plt.subplots()
    ax.plot(x, y, fmt)

    # set up  x axis
    step = 8
    ax.xaxis.set_ticks(np.arange(0, len(data[0]), step))
    ax.set_xticklabels(data[0][::step], rotation=90)

    # add label titles and plot title
    plt.xlabel(labels[0])
    plt.ylabel(labels[1])
    plt.title(title, fontsize = 20, y = 1.08)

    # save the plot
    plot_file_name = "modelgraph" + str(pi) + ".png"
    plot_file_path = "../reports/" + plot_file_name
    plt.tight_layout()
    plt.savefig("../reports/modelgraph" + str(pi) + ".png")
    print("Created new plot: " + plot_file_name)
    pi += 1


def getDataFromCSV(csv_reader):

    # initialize data matrix
    data = []

    # iterate through the .csv file
    line_count = 0
    for row in csv_reader:
        # if this is the first line, initialize the data matrix
        # otherwise populate the matrix with the new row
        if line_count == 0:
            i = 0
            while i < len(row):
                data.append([])
                i += 1
        else:
            j = 0
            while j < len(row):
                # add entry from row to data matrix
                data[j].append(row[j])
                j += 1
        line_count += 1

    return data


def main():

    print("Running...")
    
    os.chdir(file_path)
    
    report_file_path = "../reports/"
    report_with_mosquito = report_file_path + "reportwithmosquito.csv"
    report_without_mosquito = report_file_path + "reportwithoutmosquito.csv"
    reports = [report_with_mosquito, report_without_mosquito]

    # extract data from .csv files
    # data[0] => with mosquito; data[1] => without mosquito
    data = []
    for report in reports:
        with open(report) as csv_file:
            csv_reader = csv.reader(csv_file, delimiter=",")
            data.append(getDataFromCSV(csv_reader))
            print("Completed reading file: " + report)

    #
    # Create the appropriate plots from the data sets.
    #

    data_with_mosquito = data[0]
    data_without_mosquito = data[1]

    # population of the time over time w/ and w/o mosquito
    time = data_with_mosquito[1]
    pop_with_mosquito = [int(x) for x in data_with_mosquito[2]]
    pop_without_mosquito = [int(x) for x in data_without_mosquito[2]]
    data_01 = (time, pop_with_mosquito)
    data_02 = (time, pop_without_mosquito)
    label_x = "Time (24-Hour Clock Format)"
    label_y = "Population (people)"
    labels = (label_x, label_y)
    title_01 = "Population of Park Over Time (with Mosquito used)"
    title_02 = "Population of Park Over Time (without Mosquito used)"

    plotAndOutput(title_01, data_01, labels)
    plotAndOutput(title_02, data_02, labels)

    # difference in population w/ mosquito compared to w/o mosquito
    pop_diff = []
    i = 0
    while i < len(pop_with_mosquito):
        diff = pop_with_mosquito[i] - pop_without_mosquito[i]
        pop_diff.append(diff)
        i += 1
    data_01 = (time, pop_diff)
    label_y = "Difference in Population (people)"
    labels = (label_x, label_y)
    title_01 = "Difference in Population of Park With Mosquito\nvs Population of Park Without Mosquito"

    plotAndOutput(title_01, data_01, labels)

    # mean age over time w/ and w/o mosquito
    mean_with_mosquito = [float(x) for x in data_with_mosquito[3]]
    mean_without_mosquito = [float(x) for x in data_without_mosquito[3]]
    data_01 = (time, mean_with_mosquito)
    data_02 = (time, mean_without_mosquito)
    label_y = "Mean Age (years)"
    labels = (label_x, label_y)
    title_01 = "Mean Age of Park Over Time (with Mosquito used)"
    title_02 = "Mean Age of Park Over Time (without Mosquito used)"

    plotAndOutput(title_01, data_01, labels)
    plotAndOutput(title_02, data_02, labels)

    # difference in age means
    mean_diff = []
    i = 0
    while i < len(mean_with_mosquito):
        diff = mean_with_mosquito[i] - mean_without_mosquito[i]
        mean_diff.append(diff)
        i += 1
    data_01 = (time, mean_diff)
    label_y = "Difference in Mean Age (years)"
    labels = (label_x, label_y)
    title_01 = "Difference in Mean Age of Park With Mosquito\nvs Mean Age of Park Without Mosquito"

    plotAndOutput(title_01, data_01, labels)

    # done
    print("Finished!")
    

if __name__ == "__main__":
    main()

